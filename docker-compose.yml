version: '3.8'
services:
  db:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    environment:
      POSTGRES_DB: onepagerdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password

  migrate:
    build: .
    command: flask db upgrade
    depends_on:
      - db
    networks:
      - app_network
    environment:
      FLASK_APP: app.py
      FLASK_ENV: development
      DATABASE_URL: postgresql://user:password@db/onepagerdb

  flask_app:
    build: .
    command: /bin/sh -c "while ! nc -z db 5432; do sleep 1; done; python run.py"
    environment:
      APP_PORT: 80
      FLASK_APP: app.py
      FLASK_ENV: development
      DATABASE_URL: postgresql://user:password@db/onepagerdb
    depends_on:
      - db
      - migrate
    networks:
      - app_network
    volumes:
      - .:/usr/src/app

  react_app:
    build:
      context: .
      dockerfile: Dockerfile.react.dev  # Specify the development Dockerfile here
    environment:
      - HOST=0.0.0.0
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
    networks:
      - app_network
    volumes:
      - .:/app  # Ensure this is the path to your React source code
      - /app/node_modules  # Use a volume to persist node_modules

  ngrok:
    image: wernight/ngrok
    depends_on:
      - nginx
    ports:
      - "4040:4040"
    command: ngrok http nginx:80
    environment:
      NGROK_AUTHTOKEN: 2d1W8gjaXvmU3M2Bmrd8HQOrwQr_33yaPDJqxrQyNNpA8w9kD
    networks:
      - app_network
  
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"  # Expose Nginx on port 80 of the host
    depends_on:
      - flask_app
      - react_app
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Mount custom Nginx config
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
